(defun st-remove-duplicates (list)
    (cond ((null list) nil)
        ((st-member-all (first list) (rest list)) 
            (st-remove-duplicates(rest list)))
        (t (cons (first list) (st-remove-duplicates(rest list))))
    )
)

(defun st-member-all (element list)
    (cond ((null list) nil)
        ((listp (first list)) (or (st-member-all element (first list))
                                   (st-member-all element (rest list))
                                )
        )
        ((eql (car list) element) list)  
        (t (st-member-all element (cdr list)))
    )
)

(defun st-remove (element list)
    (cond ((null list) nil)
          ((eq (first list) element) (st-remove element (rest list))) 
          (t (cons (first list) (st-remove element (rest list))))  
    )
)

(print (st-remove-duplicates '(1 3 1 2 1 1)))
(print (st-remove 1 '(1 3 1 2 1 1)))
